<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <property name="now" value="current_timestamp" dbms="postgresql"/>
    <property name="floatType" value="float4" dbms="postgresql, h2"/>
    <property name="datestyle" value="sql, dmy" dbms="postgresql, h2"/>
    <changeSet  author="Oleg Vydra"  id="changelog-4.0">
            <createProcedure catalogName="public"
                                dbms="postgresql, h2, !oracle, mysql"
                             encoding="UTF-8"
                             procedureName="if_modified_func"
                             relativeToChangelogFile="true"
                             schemaName="public">
                CREATE OR REPLACE FUNCTION if_modified_func() RETURNS trigger AS $body$
                DECLARE
                    v_old_data TEXT;
                    v_new_data TEXT;
                BEGIN

                /* This dance with casting the NEW and OLD values to a ROW is not necessary in pg 9.0+ */

                    if (TG_OP = 'UPDATE') then
                        v_old_data := ROW(OLD.*);
                        v_new_data := ROW(NEW.*);
                        insert into logged_actions (schema_name,table_name,user_name,action,original_data,new_data,query)
                            values (TG_TABLE_SCHEMA::TEXT,TG_TABLE_NAME::TEXT,session_user::TEXT,substring(TG_OP,1,1),v_old_data,v_new_data, current_query());
                        RETURN NEW;
                    elsif (TG_OP = 'DELETE') then
                        v_old_data := ROW(OLD.*);
                        insert into logged_actions (schema_name,table_name,user_name,action,original_data,query)
                            values (TG_TABLE_SCHEMA::TEXT,TG_TABLE_NAME::TEXT,session_user::TEXT,substring(TG_OP,1,1),v_old_data, current_query());
                        RETURN OLD;
                    elsif (TG_OP = 'INSERT') then
                        v_new_data := ROW(NEW.*);
                        insert into logged_actions (schema_name,table_name,user_name,action,new_data,query)
                            values (TG_TABLE_SCHEMA::TEXT,TG_TABLE_NAME::TEXT,session_user::TEXT,substring(TG_OP,1,1),v_new_data, current_query());
                        RETURN NEW;
                    else
                        RAISE WARNING '[IF_MODIFIED_FUNC] - Other action occurred: %, at %',TG_OP,now();
                        RETURN NULL;
                    end if;

                EXCEPTION
                    WHEN data_exception THEN
                    RAISE WARNING '[IF_MODIFIED_FUNC] - UDF ERROR [DATA EXCEPTION] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
                    RETURN NULL;
                    WHEN unique_violation THEN
                    RAISE WARNING '[IF_MODIFIED_FUNC] - UDF ERROR [UNIQUE] - SQLSTATE: %, SQLERRM: %',SQLSTATE,SQLERRM;
                    RETURN NULL;
                    WHEN others THEN
                    RAISE WARNING '[IF_MODIFIED_FUNC] - UDF ERROR [OTHER] - SQLSTATE: %, SQLERRM: % - %',SQLSTATE,sqlerrm,TG_OP;
                    RETURN NULL;
                END;
                $body$
                LANGUAGE plpgsql
                SECURITY DEFINER
                SET search_path = pg_catalog, public;
            </createProcedure>
	</changeSet>
</databaseChangeLog>